import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { PostView } from "~/components/PostView";
import { api } from "~/utils/api";
import { PageLayout } from "~/components/layout";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";

const SingleProfilePage: NextPage<{ id: string }> = ({ id }) => {
  const { data: post } = api.posts.getById.useQuery({
    id,
  });

  if (!post) {
    return <div> No Such Post</div>;
  }
  return (
    <>
      <Head>
        <title>{`${post.post.content} - @${post.author.username}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <PostView {...post} />
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSSGHelper();

  const id = context.params?.id;
  console.log("id", id);

  if (typeof id !== "string") throw new Error("Id is not a string");

  await ssg.posts.getById.prefetch({ id });
  return {
    props: {
      trpcState: ssg.dehydrate(),
      id,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default SingleProfilePage;
